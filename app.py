import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
from prophet import Prophet
from fpdf import FPDF
import tempfile
import os

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
st.set_page_config(page_title="–í–∞–∫—Ü–∏–Ω–∞—Ü–∏—è –ø–æ COVID-19", layout="wide")
st.title("üåç –ú–∏—Ä–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–∞–∫—Ü–∏–Ω–∞—Ü–∏–∏ –æ—Ç COVID-19 ‚Äî LIVE")

@st.cache_data
def load_data():
    df = pd.read_csv("country_vaccinations.csv")
    df["date"] = pd.to_datetime(df["date"])
    return df

df = load_data()

# –í—ã–±–æ—Ä —Å—Ç—Ä–∞–Ω—ã
countries = sorted(df["country"].unique())
selected_countries = st.multiselect("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É", countries, default=["Russia", "United States", "India"])

# –ú–µ—Ç—Ä–∏–∫–∏
st.header("üìå –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏")
for country in selected_countries:
    country_df = df[df["country"] == country].dropna(subset=["total_vaccinations"])
    start = country_df["date"].min().strftime('%Y-%m-%d')
    total = int(country_df["total_vaccinations"].max())
    avg = int(country_df["daily_vaccinations"].mean())
    st.metric(label=f"{country}", value=f"{total:,}", delta=f"–°—Ç–∞—Ä—Ç: {start} | –°—Ä. {avg:,}/–¥–µ–Ω—å")

# –ì—Ä–∞—Ñ–∏–∫
st.header("üìà –ì—Ä–∞—Ñ–∏–∫ –≤–∞–∫—Ü–∏–Ω–∞—Ü–∏–π")
fig, ax = plt.subplots(figsize=(10, 5))
for country in selected_countries:
    df_c = df[df["country"] == country].dropna(subset=["total_vaccinations"])
    ax.plot(df_c["date"], df_c["total_vaccinations"], label=country)
ax.legend()
ax.grid(True)
st.pyplot(fig)

# –ü—Ä–æ–≥–Ω–æ–∑ (Prophet)
st.header("üîÆ –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 30 –¥–Ω–µ–π")
if len(selected_countries) == 1:
    country = selected_countries[0]
    df_p = df[df["country"] == country].dropna(subset=["daily_vaccinations"])
    df_p = df_p[["date", "daily_vaccinations"]].rename(columns={"date": "ds", "daily_vaccinations": "y"})
    if len(df_p) > 10:
        model = Prophet()
        model.fit(df_p)
        future = model.make_future_dataframe(periods=30)
        forecast = model.predict(future)
        fig2 = model.plot(forecast)
        st.pyplot(fig2)
    else:
        st.warning("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞.")
else:
    st.info("–ü—Ä–æ–≥–Ω–æ–∑ –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω—ã.")

# PDF –æ—Ç—á—ë—Ç
def generate_pdf_report_unicode(countries_selected, total_data, font_path):
    pdf = FPDF()
    pdf.add_page()
    pdf.add_font("DejaVu", "", font_path, uni=True)
    pdf.set_font("DejaVu", size=12)
    pdf.cell(200, 10, txt="COVID-19: –í–∞–∫—Ü–∏–Ω–∞—Ü–∏—è –ø–æ —Å—Ç—Ä–∞–Ω–∞–º", ln=1, align='C')
    pdf.ln(10)
    for country in countries_selected:
        total = total_data.loc[country]
        pdf.cell(200, 10, txt=f"{country}: {int(total):,} –ø—Ä–∏–≤–∏–≤–æ–∫", ln=1)
    return pdf

st.header("üì• –°–∫–∞—á–∞—Ç—å –æ—Ç—á—ë—Ç –≤ PDF")
if st.button("üìÑ –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å PDF"):
    font_path = "DejaVuSans.ttf"  # –£–±–µ–¥–∏—Å—å, —á—Ç–æ –æ–Ω –≤ –ø–∞–ø–∫–µ
    report_data = df.groupby("country")["total_vaccinations"].max()
    pdf = generate_pdf_report_unicode(selected_countries, report_data, font_path)
    with tempfile.NamedTemporaryFile(delete=False, suffix=".pdf") as tmp:
        pdf.output(tmp.name)
        tmp_path = tmp.name
    with open(tmp_path, "rb") as file:
        st.download_button("üìé –°–∫–∞—á–∞—Ç—å PDF", data=file, file_name="vaccination_report.pdf", mime="application/pdf")
    os.unlink(tmp_path)

st.markdown("---")
st.caption("–ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö: [Kaggle ‚Äì COVID-19 Vaccination Progress](https://www.kaggle.com/datasets/gpreda/covid-world-vaccination-progress)")

