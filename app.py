import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
from fpdf import FPDF
import tempfile
import os
from prophet import Prophet

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(page_title="COVID-19 –í–∞–∫—Ü–∏–Ω–∞—Ü–∏—è", layout="wide")
st.title("üìä –î–∞—à–±–æ—Ä–¥: –ü—Ä–æ–≥—Ä–µ—Å—Å –≤–∞–∫—Ü–∏–Ω–∞—Ü–∏–∏ –ø–æ COVID-19")

# --- –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö ---
@st.cache_data
def load_data():
    df = pd.read_csv("country_vaccinations.csv")
    df['date'] = pd.to_datetime(df['date'])
    return df

df = load_data()

# --- –í—ã–±–æ—Ä —Å—Ç—Ä–∞–Ω ---
countries = sorted(df['country'].unique())
selected_countries = st.multiselect("–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–∞–Ω", countries, default=["Russia", "United States", "India"])

# --- –ú–µ—Ç—Ä–∏–∫–∏ ---
st.header("üìå –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –ø–æ —Å—Ç—Ä–∞–Ω–∞–º")
col1, col2, col3 = st.columns(3)

for idx, country in enumerate(selected_countries[:3]):
    country_df = df[df['country'] == country].dropna(subset=["total_vaccinations", "daily_vaccinations"])
    start_date = country_df['date'].min().strftime('%Y-%m-%d')
    total = int(country_df['total_vaccinations'].max())
    avg_daily = int(country_df['daily_vaccinations'].mean())

    col = [col1, col2, col3][idx]
    with col:
        st.metric(f"{country}", f"{total:,} –¥–æ–∑", f"–°—Ç–∞—Ä—Ç: {start_date}")
        st.caption(f"–°—Ä–µ–¥–Ω–∏–π —Ç–µ–º–ø: {avg_daily:,}/–¥–µ–Ω—å")

# --- –ì—Ä–∞—Ñ–∏–∫ –≤–∞–∫—Ü–∏–Ω–∞—Ü–∏–π ---
st.header("üìà –ì—Ä–∞—Ñ–∏–∫ –≤–∞–∫—Ü–∏–Ω–∞—Ü–∏–π")
fig, ax = plt.subplots(figsize=(10, 5))
for country in selected_countries:
    country_df = df[df['country'] == country].dropna(subset=['total_vaccinations'])
    ax.plot(country_df['date'], country_df['total_vaccinations'], label=country)

ax.set_title("–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞–∫—Ü–∏–Ω–∞—Ü–∏–π –ø–æ —Å—Ç—Ä–∞–Ω–∞–º")
ax.set_xlabel("–î–∞—Ç–∞")
ax.set_ylabel("–ü—Ä–∏–≤–∏–≤–æ–∫")
ax.grid(True)
ax.legend()
st.pyplot(fig)

# --- –¢–æ–ø-10 —Å—Ç—Ä–∞–Ω ---
st.header("üèÜ –¢–æ–ø-10 —Å—Ç—Ä–∞–Ω –ø–æ –≤–∞–∫—Ü–∏–Ω–∞—Ü–∏–∏")
top_10 = df.groupby('country')['total_vaccinations'].max().sort_values(ascending=False).head(10)
fig2, ax2 = plt.subplots(figsize=(8, 4))
top_10.plot(kind='bar', ax=ax2)
ax2.set_title("–¢–æ–ø-10 –ø–æ –æ–±—â–µ–º—É —á–∏—Å–ª—É –≤–∞–∫—Ü–∏–Ω–∞—Ü–∏–π")
ax2.set_ylabel("–ü—Ä–∏–≤–∏–≤–æ–∫")
st.pyplot(fig2)

# --- –ü—Ä–æ–≥–Ω–æ–∑ Prophet ---
st.header("üîÆ –ü—Ä–æ–≥–Ω–æ–∑ –≤–∞–∫—Ü–∏–Ω–∞—Ü–∏–∏ –Ω–∞ 30 –¥–Ω–µ–π")
if len(selected_countries) == 1:
    country = selected_countries[0]
    df_country = df[df['country'] == country].dropna(subset=['daily_vaccinations'])
    df_prophet = df_country[['date', 'daily_vaccinations']].rename(columns={"date": "ds", "daily_vaccinations": "y"})

    if len(df_prophet) > 10:
        model = Prophet()
        model.fit(df_prophet)

        future = model.make_future_dataframe(periods=30)
        forecast = model.predict(future)

        fig3 = model.plot(forecast)
        st.pyplot(fig3)
        st.success("–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ—Å—Ç—Ä–æ–µ–Ω –Ω–∞ –æ—Å–Ω–æ–≤–µ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.")
    else:
        st.warning("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞.")
else:
    st.info("–ü—Ä–æ–≥–Ω–æ–∑ –º–æ–∂–Ω–æ –ø–æ—Å—Ç—Ä–æ–∏—Ç—å —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω—ã.")

# --- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è PDF —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π Unicode ---
def generate_pdf_report_unicode(countries_selected, total_data, font_path):
    pdf = FPDF()
    pdf.add_page()
    pdf.add_font("DejaVu", "", font_path, uni=True)
    pdf.set_font("DejaVu", size=12)
    pdf.cell(200, 10, txt="COVID-19: –í–∞–∫—Ü–∏–Ω–∞—Ü–∏—è –ø–æ —Å—Ç—Ä–∞–Ω–∞–º", ln=1, align='C')
    pdf.ln(10)
    for country in countries_selected:
        total = total_data.loc[country]
        pdf.cell(200, 10, txt=f"{country}: {int(total):,} –ø—Ä–∏–≤–∏–≤–æ–∫", ln=1)
    return pdf

# --- –ö–Ω–æ–ø–∫–∞ —Å–∫–∞—á–∞—Ç—å PDF ---
st.header("üì• –°–∫–∞—á–∞—Ç—å –æ—Ç—á—ë—Ç –≤ PDF")
if st.button("üìÑ –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å PDF"):
    font_path = "DejaVuSans.ttf"  # –§–∞–π–ª –¥–æ–ª–∂–µ–Ω –ª–µ–∂–∞—Ç—å –≤ –ø–∞–ø–∫–µ —Å app.py
    report_data = df.groupby('country')['total_vaccinations'].max()
    pdf = generate_pdf_report_unicode(selected_countries, report_data, font_path)

    with tempfile.NamedTemporaryFile(delete=False, suffix=".pdf") as tmp:
        pdf.output(tmp.name)
        tmp_path = tmp.name

    with open(tmp_path, "rb") as file:
        st.download_button(
            label="üìé –°–∫–∞—á–∞—Ç—å PDF",
            data=file,
            file_name="vaccination_report.pdf",
            mime="application/pdf"
        )

    os.unlink(tmp_path)

# --- –ò—Å—Ç–æ—á–Ω–∏–∫ ---
st.markdown("---")
st.caption("–î–∞–Ω–Ω—ã–µ: [Kaggle ‚Äì COVID-19 World Vaccination Progress](https://www.kaggle.com/datasets/gpreda/covid-world-vaccination-progress)")
